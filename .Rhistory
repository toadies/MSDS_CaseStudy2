election <- data.frame(buchanon, bush)
buchanon <- c(262, 73, 248, 65, 570, 789, 90, 182, 270, 186, 122, 89, 561,
36, 29, 650, 504, 83, 33, 39, 29, 9, 71, 24, 30, 22, 242, 99, 836, 76, 105,
102, 29, 10, 289, 305, 282, 67, 39, 29, 272, 563, 108, 47, 90, 267, 43, 446,
145, 570, 1010, 538, 147, 229, 124, 311, 305, 194, 114, 108, 27, 26, 396, 46,
120, 88, 3407)
bush <- c(34062, 5610, 38637, 5413, 115185, 177279, 2873, 35419, 29744, 41745,
60426, 10964, 289456, 4256, 2698, 152082, 73029, 12608, 2448, 4750, 3300,
1840, 3546, 2153, 3764, 4743, 30646, 20196, 176967, 4985, 28627, 9138, 2481,
1669, 49963, 106141, 39053, 6860, 1316, 3038, 57948, 55135, 33864, 16059,
16404, 52043, 5058, 134476, 26216, 68581, 184312, 90101, 13439, 39497, 34705,
36248, 83100, 75293, 12126, 8014, 4051, 2326, 82214, 4511, 12176, 4983,
152846)
election <- data.frame(buchanon, bush)
election$log.buchanon <- log(election$buchanon)
election$log.bush <- log(election$bush)
##Regular linear regression
lin.reg1 <- lm(buchanon ~ bush, data=election)
##Residual plots, regular linear regression
par(mfrow=c(2,2))
plot(lin.reg1)
##Without Palm Beach County
lin.reg2 <- lm(buchanon ~ bush, data=election[-67,])
##Linear-Log without Palm Beach County
lin.reg3 <- lm(buchanon ~ log.bush, data=election[-67,])
##Log-Linear without Palm Beach County
lin.reg4 <- lm(log.buchanon ~ bush, data=election[-67,])
##Log-Log without Palm Beach County
lin.reg5 <- lm(log.buchanon ~ log.bush, data=election[-67,])
##Histogram of residuals with normal curve superimposed
res.elect <- resid(lin.reg5)
hist(res.elect, prob = TRUE)
curve(dnorm(x, mean=mean(res.elect), sd=sd(res.elect)), add=TRUE,
col = "blue", main='Histogram of Residuals, Election Data', xlab='Residuals')
box()
##Plot of residuals, by index
plot(res.elect)
lines(rep(0,length(res.elect)))
##Plot of log(Bush) vs. log(Buchanon), with fitted regression
plot(election$log.bush, election$log.buchanon)
lines(election$log.bush[-67], lin.reg5$fitted.values)
plot(lin.reg5)
?element_text
?theme
state.area
names(state.area)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(XML)
library(ggplot2)
library(httr)
library(rvest)
library(kableExtra)
library(tidyr)
# Read the state size CSV file
states.size <- read.csv("C:/SMU/SMU-MSDS-Homework/6306-Unit10/statesize.csv")
dim(states.size)
?paste
names(states.size)
head(states.size)
head(mainland.veterans.clinics.count)
# load the dataset into R
mental.health.clinics <- get(load("C:/SMU/SMU-MSDS-Homework/6306-Unit10/N-MHSS-2015-DS0001-data/N-MHSS-2015-DS0001-data-r.rda"))
# print the dimenstions of the data set
dim(mental.health.clinics)
# Get the Veterans clinics only in mainland US
mainland.veterans.clinics <- subset(mental.health.clinics, startsWith(as.character(FACILITYTYPE), "Veterans") & !(trimws(LST) %in% c("AK", "HI")))
dim(mainland.veterans.clinics)
# Get the count of veterans clinics by state in mainland US
mainland.veterans.clinics$Veterans.Count <- 0
mainland.veterans.clinics.count <- aggregate(Veterans.Count ~ LST, data=mainland.veterans.clinics, FUN=length)
names(mainland.veterans.clinics.count) <- c("State", "Count")
# Print the class for the variable. It is a data frame
class(mainland.veterans.clinics.count)
# print
kable(mainland.veterans.clinics.count, row.names=FALSE)  %>%
kable_styling(bootstrap_options = c("striped", "condensed"), full_width = F)
head(mainland.veterans.clinics.count)
head(states.size
)
sapply(mainland.veterans.clinics.count, class)
sapply(states.size, class)
?paste
?merge
new.count <- merge(mainland.veterans.clinics.count, states.size, by.x = State, by.y = Abbrev)
new.count <- merge(mainland.veterans.clinics.count, states.size, by.x = mainland.veterans.clinics.count$State, by.y = states.size$Abbrev)
new.count <- merge(mainland.veterans.clinics.count, states.size, by.x = c("State"), by.y = c("Abbrev"))
head(new.count)
new.count <- merge(mainland.veterans.clinics.count, states.size, by.x = c("State"), by.y = c("Abbrev"))
head(new.count)
mainland.veterans.clinics.count$State <- as.character(mainland.veterans.clinics.count$State)
states.size$Abbrev <- as.character(states.size$Abbrev)
new.count <- merge(mainland.veterans.clinics.count, states.size, by.x = c("State"), by.y = c("Abbrev"))
head(new.count)
is.na(mainland.veterans.clinics.count$State)
states.size$Abbrev <- as.character(trimws(states.size$Abbrev))
mainland.veterans.clinics.count$State <- as.character(trimws(mainland.veterans.clinics.count$State))
new.count <- merge(mainland.veterans.clinics.count, states.size, by.x = c("State"), by.y = c("Abbrev"))
head(new.count)
?paster
?paste
4/50.75
# Merge the two dataframes
mainland.veterans.clinics.count.new <- merge(mainland.veterans.clinics.count, states.size, by.x = c("State"), by.y = c("Abbrev"))
head(mainland.veterans.clinics.count.new)
# Add a column for clinics per thousand sq. miles
mainland.veterans.clinics.count.new$CountSqMiles <- mainland.veterans.clinics.count.new$Count / (mainland.veterans.clinics.count.new$SqMiles / 1000)
head(mainland.veterans.clinics.count.new)
mainland.veterans.clinics.count.new
summary(mainland.veterans.clinics.count.new$CountSqMiles)
1.91388 / 0.11611
sum(mainland.veterans.clinics.count.new$CountSqMiles)
mainland.veterans.clinics.count.new[c(-CountSqMiles)]
mainland.veterans.clinics.count.new[c(-"CountSqMiles")]
mainland.veterans.clinics.count.new[-"CountSqMiles"]
mainland.veterans.clinics.count.new[-CountSqMiles]
?sort
mainland.veterans.clinics.count.new[CountSqMiles = sort(mainland.veterans.clinics.count.new$CountSqMiles, decreasing = TRUE)]
mainland.veterans.clinics.count.new[CountSqMiles = sort(mainland.veterans.clinics.count.new$CountSqMiles, decreasing = TRUE),]
mainland.veterans.clinics.count.new[CountSqMiles = sort(mainland.veterans.clinics.count.new$CountSqMiles, decreasing = TRUE)]
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(XML)
library(ggplot2)
library(httr)
library(rvest)
library(kableExtra)
library(tidyr)
# Use rvest read_html to read the web page or local page based on the connection
#san.antonio.spurs <- read_html("http://www.espn.com/nba/team/stats/_/name/sa/san-antonio-spurs")
san.antonio.spurs <- read_html("C:/SMU/SMU-MSDS-Homework/6306-Unit9/SanAntonioSpurs.html")
# Get all the tables
san.antonio.spurs.tables <- html_nodes(san.antonio.spurs, 'table')
# There are two tables. First is the Game statistics. The second is the shooting statistics. We need the second one.
# We can get a data frame from html_table
san.antonio.spurs.shooting <- html_table(san.antonio.spurs.tables[[2]])
san.antonio.spurs.shooting
knitr::opts_chunk$set(engine='R', echo = TRUE)
# Read the datasets
male.display.data <- read.csv("C:/SMU/Courses/StatisticalFoundationsForDataScience/Unit 10/Homework/Male Display Data Set.csv")
male.display.data
#Crickets
chirps <- c(882, 1188, 1104, 864, 1200, 1032, 960, 900)
temp <- c(69.7, 93.3, 84.3, 76.3, 88.6, 82.6, 71.6, 79.6)
cricket.lm <- lm(temp ~ chirps)
summary(cricket.lm)
confint(cricket.lm)
names(male.display.data)
knitr::opts_chunk$set(engine='R', echo = TRUE)
library(SASmarkdown)
saspath <- "C:/Tools/SASHome/SASFoundation/9.4/sas.exe"
sasopts <- "-nosplash -linesize 75"
knitr::opts_chunk$set(engine='sashtml', engine.path=saspath, engine.opts=sasopts, comment=NA)
library(mosaic)
library(dplyr)
library(ggplot2)
# Read the datasets
male.display.data <- read.csv("C:/SMU/Courses/StatisticalFoundationsForDataScience/Unit 10/Homework/Male Display Data Set.csv")
# Check the datasets
# head(male.display.data)
# Get the linear model
male.display.lm <- lm(Tcell ~ Mass, data=male.display.data)
##Create the "new" data for use in finding the CI and PI
mass.sorted <- male.display.data$Mass
mass.sorted <- sort(mass.sorted)
##Calculate the CI and PI
male.display.ci <- predict(male.display.lm, newdata = data.frame(Mass = mass.sorted), interval = c("confidence"), type = c("response"), level = .99)
male.display.pi <- predict(male.display.lm, newdata = data.frame(Mass = mass.sorted), interval = c("predict"), type = c("response"), level = .99)
##Scatterplot of the original data
plot(male.display.data$Mass, male.display.data$Tcell, ylab = "T-cell response", xlab = "Stone Mass")
##Add the regression line
abline(male.display.lm, col = "red")
##At the CI and PI
lines(mass.sorted, male.display.ci[,2],col = "blue", lty = 2, lwd = 2)
lines(mass.sorted, male.display.ci[,3],col = "blue", lty = 2, lwd = 2)
lines(mass.sorted, male.display.pi[,2],col = "green", lty = 2, lwd = 2)
lines(mass.sorted, male.display.pi[,3],col = "green", lty = 2, lwd = 2)
##Create the data set
chirps <- c(882, 1188, 1104, 864, 1200, 1032, 960, 900)
temp <- c(69.7, 93.3, 84.3, 76.3, 88.6, 82.6, 71.6, 79.6)
crickets <- data.frame(chirps, temp)
##Fit the regression model
cricket.lm <- lm(chirps ~ temp, data=crickets)
##Create the "new" data for use in finding the CI and PI
newx <- crickets$temp
newx <- sort(newx)
##Calculate the CI and PI
prd_c <- predict(cricket.lm, newdata = data.frame(temp = newx),
interval = c("confidence"), type = c("response"), level = .95)
prd_p <- predict(cricket.lm, newdata = data.frame(temp = newx),
interval = c("predict"), type = c("response"), level = .95)
##Scatterplot of the original data
plot(temp, chirps, ylab = "Chirps Per Minute", xlab = "Temperature")
##Add the regression line
abline(cricket.lm, col = "red")
##At the CI and PI
lines(newx,prd_c[,2],col = "blue",lty = 2, lwd = 2)
lines(newx,prd_c[,3],col = "blue", lty = 2, lwd = 2)
lines(newx,prd_p[,2],col = "green", lty = 2, lwd = 2)
lines(newx,prd_p[,3],col = "green", lty = 2, lwd = 2)
?lm
?calibrate
library(investr)
?calibrate
x <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5)
y <- c(4, 6, 5, 8, 6, 7, 9, 10, 11, 13, 15, 17, 20, 22, 27, 29, 34, 33, 38, 40)
gender <- factor(c(rep('Male', 10), rep('Female', 10)))
fake.data <- data.frame(x, y, gender)
plot(fake.data$x, fake.data$y, pch = c(2, 3)[as.numeric(fake.data$gender)],
col=c('red', 'blue')[as.numeric(fake.data$gender)], lwd=2,
xlab='x', ylab='y')
legend('topleft', c('Male', 'Female'), col=c('red', 'blue'), pch=c(2, 3),
lty=NULL, pt.lwd=2)
model1 <- lm(y ~ x + gender + x:gender, data=fake.data)
##Set male as the reference level:
fake.data2 <- within(fake.data, gender <- relevel(gender, ref = 'Male'))
model2 <- lm(y ~ x + gender + x:gender, data=fake.data2)
confint(model2)
par(mfrow=c(2,2))
plot(model2)
sresid <- rstudent(model2)
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
box()
xfit <- seq(min(sresid), max(sresid), length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit, col='blue')
summary(model1)
summary(model2)
user_url <- "https://untappd.com/user/Chrisballenger"
user.profile <- read_html(user_url)
#
# R Code to scrape the data from Untappd Website
#
library(RCurl)
library(XML)
library(ggplot2)
library(httr)
library(rvest)
library(kableExtra)
library(tidyr)
user.profile <- read_html(user_url)
user_url <- "https://untappd.com/user/Chrisballenger"
user.profile <- read_html(user_url)
user.activity <- html_nodes(user.profile, '.activity box')
user.profile
user.activity <- html_nodes(user.profile[2], '.activity box')
class(user.profile)
user.activity <- html_nodes(user.profile, '.content')
user.activity
user.activity <- html_nodes(user.profile, ".activity box")
user.activity <- html_nodes(user.profile, "div .activity box")
user.activity <- html_nodes(user.profile, "div .content")
user.activity <- html_nodes(user.profile, 'div[class="activity box"]')
user.activity
user.checkins <- user.activity %>% html_nodes('div[class="item"')
user.checkins <- user.activity %>% html_nodes('div[class="item"]')
user.checkins
user.checkins <- user.activity %>% html_nodes('div .item')
user.checkins <- user.activity %>% html_nodes('div .item')
html_text(user.activity)
login.url <- "https://untappd.com/login"
html.session <- html_session(login.url)
html.form <- html_form(html.session)[[1]]
html.form
filled.form <- set_values(html.form, username="selwyn_samuel", password="1350HS()aaMI")
submit_form(filled.form)
submit_form(html.session, filled.form)
user.profile <- jump_to(html.session, user_url)
user.activity <- html_nodes(user.profile, 'div[class="activity box"]')
user.checkins <- user.activity %>% html_nodes('div .item')
user.checkins
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"]')
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"] span')
user.checkin.total
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"] span[class="stat"]')
user.checkin.total
html_text(user.checkin.total)
as.numeric(html_text(user.checkin.total))
853/15
source(env.R)
source("env.R")
source("env.R")
pwd()
wd()
getwd()
setwd("C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2")
source("env.R")
install.packages("C:/downloads/Tools/RSelenium_1.7.1.tar.gz", repos = NULL, type = "source")
install.packages("wdman")
install.packages("binman")
install.packages("C:/downloads/Tools/RSelenium_1.7.1.tar.gz", repos = NULL, type = "source")
library(RSelenium)
library(RSelenium)
library(stringr)
library(stringr)
remDr <- remoteDriver(browserName="chrome")
remDr$open()
# Use RSelenium Package to navigate to multiple packages
RSelenium::startServer()
remDr$open()
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver(browserName="chrome")
remDr$open()
install.packages("chromer")
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver(browserName="chrome")
remDr$open()
?remoteDriver
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver()
remDr$open()
browserName="chrome"
browserName="chrome"
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver(browserName="chrome")
remDr$open()
errorDetails()
remDr$errorDetails
install.packages("phantom")
# Use RSelenium Package to navigate to multiple packages
pJS <- phantom()
wdman::phantomjs()
# Use RSelenium Package to navigate to multiple packages
pJS <- phantom()
remDr <- remoteDriver(browserName="phantomjs")
remDr$open()
remDr$navigate(login.url)
login.url <- "https://untappd.com/login"
remDr$navigate(login.url)
# Use RSelenium Package to navigate to multiple packages
pJS <- phantom()
remDr <- remoteDriver(browserName="phantomjs")
remDr$open()
remDr$open()
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver(browserName="chrome")
remDr$open()
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver(browserName="chrome")
remDr$open()
remDr$navigate(login.url)
remDr$findElement("id", "username")$sendKeysToElement(list(username))
remDr$findElement("id", "password")$sendKeysToElement(list(password))
remDr$findElement("class name", "button yellow submit-btn")$clickElement()
?findElement
remDr$findElement("input type", "submit")$clickElement()
remDr$findElement("name", "submit")$clickElement()
remDr$findElement("type", "submit")$clickElement()
remDr$findElement("tag name", "input")$clickElement()
remDr$findElement('span input[type="submit"]')$clickElement()
remDr$findElement('input[type="submit"]')$clickElement()
remDr$findElement("type", "submit")$clickElement()
remDr$findElement('span input .type')$clickElement()
test.nodes <- html_nodes(html.session, 'span input')
test.nodes
remDr$findElement('span input')$clickElement()
remDr$findElement("class name", "button yellow submit-btn")$clickElement()
remDr$close()
# Use RSelenium Package to navigate to multiple packages
remDr <- remoteDriver(browserName="chrome")
remDr$open()
remDr$navigate(login.url)
remDr$findElement("id", "username")$sendKeysToElement(list(username))
remDr$findElement("id", "password")$sendKeysToElement(list(password))
remDr$findElement("class name", "button yellow submit-btn")$clickElement()
remDr$findElement(using = "css selector", "span input")$clickElement()
remDr$navigate(user_url)
user.showmore <- html_nodes(user.profile, 'a[hef="#"]')
user.showmore <- html_nodes(user.profile, 'a')
user.showmore <- html_nodes(user.profile, 'a[data-user-name="Chrisballenger"]')
user.showmore
remDr$findElement(using = "css selector", "a[data-user-name='Chrisballenger']")$clickElement()
remDr$findElement(using = "css selector", "a[data-user-name='Chrisballenger']")$clickElement()
user.page <- remDr$getPageSource()
user.page
user.activity <- html_nodes(user.profile, 'div[class="activity box"]')
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"] span[class="stat"]')
user.checkins <- user.activity %>% html_nodes('div .item')
user.checkins
user.activity <- html_nodes(user.profile, 'div[class="activity box"]')
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"] span[class="stat"]')
user.checkins <- user.activity %>% html_nodes('div .item')
user.page <- remDr$getPageSource()
user.activity <- html_nodes(user.page, 'div[class="activity box"]')
user.page <- read_html(remDr$getPageSource())
user.page <- remDr$getPageSource()
user.page
class(user.page)
length(user.page)
user.page[1]
user.page <- read_html(remDr$getPageSource()[1])
length(user.page[1])
class(user.page[1])
class((user.page[1])[1])
user.page <- read_html(as.character(remDr$getPageSource()))
user.page <- read_html(as.character(remDr$getPageSource()))
user.activity <- html_nodes(user.page, 'div[class="activity box"]')
user.checkin.total <- html_nodes(user.page, 'div a[href="/user/Chrisballenger"] span[class="stat"]')
user.checkins <- user.activity %>% html_nodes('div .item')
user.checkins
remDr$close()
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"] span[class="stat"]')
user.checkin.total <- as.numeric(html_text(user.checkin.total))
1700*0.0187
user.checkin.total <- html_nodes(user.profile, 'div a[href="/user/Chrisballenger"] span[class="stat"]')
user.checkin.total
user.checkin.total <- as.numeric(html_text(user.checkin.total))
user.checkin.total
58+37+8
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
?paste
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_functions.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
chris.chcekins <- get_user_checkins("ChrisBallenger")
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
chris.chcekins <- get_user_checkins("ChrisBallenger")
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
chris.chcekins <- get_user_checkins("ChrisBallenger")
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
chris.checkins <- get_user_checkins("ChrisBallenger")
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
chris.checkins <- get_user_checkins("ChrisBallenger")
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
chris.checkins <- get_user_checkins("ChrisBallenger")
source('C:/SMU/Courses/MSDS 6306 - DoingDataScience/github/MSDS_CaseStudy2/Untappd_Webscrapper_UserCheckins.R')
errorDetails()
remDr <- get_remote_chrome_driver()
user.url <- paste(base.url, "user/", user.name, sep = "")
print(user.url)
close_remote_chrome_driver(remDr)
chris.checkins <- get_user_checkins("ChrisBallenger")
